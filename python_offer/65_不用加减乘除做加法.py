"""
写一个函数，求两个整数之和，要求在函数体内不得使用 “+”、“-”、“*”、“/” 四则运算符号。

示例:
    输入: a = 1, b = 1
    输出: 2

提示：
    a, b 均可能是负数或 0
    结果不会溢出 32 位整数
"""


def add(a, b):
    """
    一. 十进制计算
    大家都举5+7的例子。那我另想一个例子，计算十进制13+9：

    1.计算不进位的和。十位1不变，个位3加9等于2，结果为12；
    2.计算进位。十位没进位，个位进位为1，结果为10。

    再计算十进制12+10：
    1.计算不进位的和。十位1加1等于2，个位2加0等于2，结果为22；
    2.计算进位。十位没进位，个位也没进位，结果为0。

    因此结果13+9=22。

    二. 二进制计算
    13二进制为：1101，9二进制为：1001。

    十进制是遇到大于等于10就保留余数，然后进位1。
    那对应到二进制，就是遇到2就保留余数0，然后进位1。（二进制位之和不可能大于2）

    计算二进制1101+1001：
    1.计算不进位的和。从左到右，第1位为0，第2位为1，第3位为0，第4位为0，结果为0100；
    2.计算进位。从左到右，第1位进位1，第2、3位没有进位，第4位进位1，结果为1001。不对，进位右边要补0，正确结果是10010。

    计算二进制0100+10010：
    1.计算不进位的和：10110；
    2.计算进位：无。

    因此结果为10110=22。

    三.二进制加法公式

    1）分析上面对二进制的计算过程，不难发现：
    1.计算不进位的和，相当于对两个数进制异或：1101^1001=0100；
    2.计算进位，第1位相当于对两个数求与：1101&1001=1001，然后再对其进行左移1位：1001<<1=10010。
    然后再重复以上两个步骤。这里再异或一次就得到结果了，没进位：0100^10010=10110=22。

    2）计算a+b，等价于(a^b)+((a&b)<<1)。
    由于公式中又出现了+号，因此要再重复2）这个等价的计算过程。
    结束条件是：没有进位了。

    作者：ccav
    链接：https://leetcode-cn.com/problems/bu-yong-jia-jian-cheng-chu-zuo-jia-fa-lcof/solution/er-jin-zhi-qiu-he-chao-xiang-xi-da-bai-10000yong-h/
    来源：力扣（LeetCode）
    著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
    :param a: int
    :param b: int
    :return: int
    """
    """有负数时出错"""
    if a == 0: return b
    if b == 0: return a
    plus1 = a ^ b
    plus2 = (a & b) << 1
    return add(plus1, plus2)


def add_2(a, b):
    """
    Python 负数的存储：
    Python / Java 中的数字都是以 补码 形式存储的。但 Python 没有 int , long 等不同长度变量，即没有变量位数的概念。
    获取负数的补码： 需要将数字与十六进制数 0xffffffff 相与。可理解为舍去此数字 3232 位以上的数字，从无限长度变为一个 3232 位整数。
    返回前数字还原： 若补码 aa 为负数（ 0x7fffffff 是最大的正数的补码 ），需执行 ~(a ^ x) 操作，将补码还原至 Python 的存储格式。 a ^ x 运算将 11 至 3232 位按位取反； ~ 运算是将整个数字取反；因此， ~(a ^ x) 是将 3232 位以上的位取反，即由 00 变为 11 ， 11 至 3232 位不变。

    print(hex(1)) # = 0x1 补码
    print(hex(-1)) # = -0x1 负号 + 原码 （ Python 特色，Java 会直接输出补码）

    print(hex(1 & 0xffffffff)) # = 0x1 正数补码
    print(hex(-1 & 0xffffffff)) # = 0xffffffff 负数补码

    print(-1 & 0xffffffff) # = 4294967295 （ Python 将其认为正数）

    作者：jyd
    链接：https://leetcode-cn.com/problems/bu-yong-jia-jian-cheng-chu-zuo-jia-fa-lcof/solution/mian-shi-ti-65-bu-yong-jia-jian-cheng-chu-zuo-ji-7/
    来源：力扣（LeetCode）
    著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
    :param a:
    :param b:
    :return:
    """
    x = 0xffffffff
    a, b = a & x, b & x
    while b != 0:
        a, b = (a ^ b), (a & b) << 1 & x
    return a if a <= 0x7fffffff else ~(a ^ x)


print(add(-1, 2))
