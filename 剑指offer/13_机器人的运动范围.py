"""
地上有一个m行n列的方格，从坐标 [0,0] 到坐标 [m-1,n-1] 。
一个机器人从坐标 [0, 0] 的格子开始移动，它每次可以向左、右、上、下移动一格（不能移动到方格外），也不能进入行坐标和列坐标的数位之和大于k的格子。
例如，当k为18时，机器人能够进入方格 [35, 37] ，因为3+5+3+7=18。
但它不能进入方格 [35, 38]，因为3+5+3+8=19。请问该机器人能够到达多少个格子？
示例 1：
    输入：m = 2, n = 3, k = 1
    输出：3
示例 2：
    输入：m = 3, n = 1, k = 0
    输出：1
提示：
    1 <= n,m <= 100
    0 <= k <= 20
"""


def movingCount(m, n, k):
    """
    由于机器人每次只能移动一格（即只能从 x 运动至 x±1），因此每次只需计算 x 到 x±1 的数位和增量。
    本题说明 1≤n,m≤100 ，以下公式仅在此范围适用。
    数位和增量公式： 设 x 的数位和为 s_x， x+1 的数位和为 s_{x+1}；
        当 (x + 1)%10 = 0时： s_{x+1} = s_x - 8，例如 19,20 的数位和分别为 10,2 ；
        当 (x + 1)%10 = 0时： s_{x+1} = s_x + 1，例如 1,2 的数位和分别为 1,2 。

    深度优先搜索：
        可以理解为暴力法模拟机器人在矩阵中的所有路径。
        DFS 通过递归，先朝一个方向搜到底，再回溯至上个节点，沿另一个方向搜索，以此类推。
    剪枝：
        在搜索中，遇到数位和超出目标值、此元素已访问，则应立即返回，称之为 可行性剪枝 。
    算法解析：
        递归参数：
            当前元素在矩阵中的行列索引 i 和 j ，两者的数位和 si, sj 。
        终止条件：
            当 ① 行列索引越界 或 ② 数位和超出目标值 k 或 ③ 当前元素已访问过 时，返回 00 ，代表不计入可达解。
        递推工作：
            标记当前单元格 ：将索引 (i, j) 存入 Set visited 中，代表此单元格已被访问过。
            搜索下一单元格： 计算当前元素的 下、右 两个方向元素的数位和，并开启下层递归 。
    :param m: int
    :param n: int
    :param k: int
    :return: int
    """
    def dfs(i, j, si, sj):
        if i >= m or j >= n or k < si + sj or (i, j) in visited:
            return 0
        visited.add((i, j))
        return 1 + dfs(i + 1, j, si + 1 if (i + 1) % 10 else si - 8, sj) + \
               dfs(i, j + 1, si, sj + 1 if (j + 1) % 10 else sj - 8)

    visited = set()
    return dfs(0, 0, 0, 0)


print(movingCount(38, 15, 9))

